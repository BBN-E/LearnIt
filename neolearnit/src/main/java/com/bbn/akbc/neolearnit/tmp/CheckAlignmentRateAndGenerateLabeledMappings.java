package com.bbn.akbc.neolearnit.tmp;

import com.bbn.akbc.neolearnit.common.Annotation;
import com.bbn.akbc.neolearnit.common.InstanceIdentifier;
import com.bbn.akbc.neolearnit.common.LearnItConfig;
import com.bbn.akbc.neolearnit.common.MinimumInstanceIdentifier;
import com.bbn.akbc.neolearnit.mappings.groups.Mappings;
import com.bbn.akbc.neolearnit.observations.label.LabelPattern;

import java.io.File;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class CheckAlignmentRateAndGenerateLabeledMappings {
    public static void main(String[] args) throws Exception {
        String paramPath = args[0];
        LearnItConfig.loadParams(new File(paramPath));
        String autogeneratedMappingsPath = args[1];
        String autoConvertedLabelMappings = args[2];
        String outputLabeledMappings = args[3];
        Mappings currentAutoPopulatedMappings = Mappings.deserialize(new File(autogeneratedMappingsPath), true);

        Set<String> docIdSet = new HashSet<>();

        Map<MinimumInstanceIdentifier, Set<InstanceIdentifier>> currentMinimumInstanceIdentifierSetMap = new HashMap<>();
        for (InstanceIdentifier instanceIdentifier : currentAutoPopulatedMappings.getSeedInstances()) {
            MinimumInstanceIdentifier minimumInstanceIdentifier;
            minimumInstanceIdentifier = new MinimumInstanceIdentifier(instanceIdentifier.getDocid(), instanceIdentifier.getSentid(), instanceIdentifier.getSlot0Start(), instanceIdentifier.getSlot0End(), instanceIdentifier.getSlot1Start(), instanceIdentifier.getSlot1End());
            Set<InstanceIdentifier> buf;
            buf = currentMinimumInstanceIdentifierSetMap.getOrDefault(minimumInstanceIdentifier, new HashSet<>());
            buf.add(instanceIdentifier);
            currentMinimumInstanceIdentifierSetMap.put(minimumInstanceIdentifier, buf);

            minimumInstanceIdentifier = new MinimumInstanceIdentifier(instanceIdentifier.getDocid(), instanceIdentifier.getSentid(), instanceIdentifier.getSlot1Start(), instanceIdentifier.getSlot1End(), instanceIdentifier.getSlot0Start(), instanceIdentifier.getSlot0End());
            buf = currentMinimumInstanceIdentifierSetMap.getOrDefault(minimumInstanceIdentifier, new HashSet<>());
            buf.add(instanceIdentifier);
            currentMinimumInstanceIdentifierSetMap.put(minimumInstanceIdentifier, buf);

            docIdSet.add(instanceIdentifier.getDocid());
        }
        for (InstanceIdentifier instanceIdentifier : currentAutoPopulatedMappings.getPatternInstances()) {
            MinimumInstanceIdentifier minimumInstanceIdentifier;
            minimumInstanceIdentifier = new MinimumInstanceIdentifier(instanceIdentifier.getDocid(), instanceIdentifier.getSentid(), instanceIdentifier.getSlot0Start(), instanceIdentifier.getSlot0End(), instanceIdentifier.getSlot1Start(), instanceIdentifier.getSlot1End());
            Set<InstanceIdentifier> buf;
            buf = currentMinimumInstanceIdentifierSetMap.getOrDefault(minimumInstanceIdentifier, new HashSet<>());
            buf.add(instanceIdentifier);
            currentMinimumInstanceIdentifierSetMap.put(minimumInstanceIdentifier, buf);

            minimumInstanceIdentifier = new MinimumInstanceIdentifier(instanceIdentifier.getDocid(), instanceIdentifier.getSentid(), instanceIdentifier.getSlot1Start(), instanceIdentifier.getSlot1End(), instanceIdentifier.getSlot0Start(), instanceIdentifier.getSlot0End());
            buf = currentMinimumInstanceIdentifierSetMap.getOrDefault(minimumInstanceIdentifier, new HashSet<>());
            buf.add(instanceIdentifier);
            currentMinimumInstanceIdentifierSetMap.put(minimumInstanceIdentifier, buf);

            docIdSet.add(instanceIdentifier.getDocid());
        }

        Mappings convertedLabelMappings = Mappings.deserialize(new File(autoConvertedLabelMappings), true);

        Annotation.InMemoryAnnotationStorage inMemoryAnnotationStorage = new Annotation.InMemoryAnnotationStorage(convertedLabelMappings);
        Annotation.InMemoryAnnotationStorage filteredImMemoryAnnotationStorage = new Annotation.InMemoryAnnotationStorage();
        int unalignable = 0;
        for (InstanceIdentifier instanceIdentifier : inMemoryAnnotationStorage.getAllInstanceIdentifier()) {
            if (!docIdSet.contains(instanceIdentifier.getDocid())) continue;
            MinimumInstanceIdentifier minimumInstanceIdentifier = new MinimumInstanceIdentifier(instanceIdentifier.getDocid(), instanceIdentifier.getSentid(), instanceIdentifier.getSlot1Start(), instanceIdentifier.getSlot1End(), instanceIdentifier.getSlot0Start(), instanceIdentifier.getSlot0End());
            if (!currentMinimumInstanceIdentifierSetMap.containsKey(minimumInstanceIdentifier)) {
                unalignable++;
            }


            // Real logic here.
            // Since HashMapStorage happens to de-duplicate for us, it's easy to do so.
            // The number of LabelPattern will be 1 or 2.
            // 1 Means, either both two annotator think it has causal_relation, or both annotator think it does not have causal_relation
            // 2 Means, one think it's yes, and one think it's no.


            if (inMemoryAnnotationStorage.lookupInstanceIdentifierAnnotation(instanceIdentifier).size() == 1) {
                LabelPattern labelPattern = inMemoryAnnotationStorage.lookupInstanceIdentifierAnnotation(instanceIdentifier).iterator().next();
                if (labelPattern.getFrozenState().equals(Annotation.FrozenState.FROZEN_GOOD)) {
                    filteredImMemoryAnnotationStorage.addAnnotation(instanceIdentifier, new LabelPattern("IS_CAUSAL_RELATED", Annotation.FrozenState.FROZEN_GOOD));
                }
            } else if (inMemoryAnnotationStorage.lookupInstanceIdentifierAnnotation(instanceIdentifier).size() == 2) {
                filteredImMemoryAnnotationStorage.addAnnotation(instanceIdentifier, new LabelPattern("IS_CAUSAL_RELATED", Annotation.FrozenState.FROZEN_GOOD));
            } else {
                System.out.println("What are you doing?");
            }
        }
        System.out.println(filteredImMemoryAnnotationStorage.getAllInstanceIdentifier().size());
        System.out.println("We have " + unalignable + " unalignable sentences.");
        filteredImMemoryAnnotationStorage.convertToMappings().serialize(new File(outputLabeledMappings), true);
    }
}
