package com.bbn.akbc.neolearnit.labelers;

import com.bbn.akbc.neolearnit.common.Annotation;
import com.bbn.akbc.neolearnit.common.InstanceIdentifier;
import com.bbn.akbc.neolearnit.common.LearnItConfig;
import com.bbn.akbc.neolearnit.mappings.groups.Mappings;
import com.bbn.akbc.neolearnit.observations.label.LabelPattern;

import java.io.File;
import java.util.HashSet;
import java.util.Set;

public class LabelEverythingLabeler implements MappingLabeler {
    public static void main(String[] args) throws Exception {
        String paramPath = args[0];
        LearnItConfig.loadParams(new File(paramPath));
        String autogeneratedMappingsPath = args[1];
        String outputLabeledMappingsPath = args[2];
        LabelEverythingLabeler labelEverythingLabeler = new LabelEverythingLabeler();
        Mappings outputMappings = labelEverythingLabeler.LabelMappings(Mappings.deserialize(new File(autogeneratedMappingsPath), true));
        outputMappings.serialize(new File(outputLabeledMappingsPath), true);
    }

    @Override
    public Mappings LabelMappings(Mappings original) {
        Set<InstanceIdentifier> instanceIdentifierSet = new HashSet<>();
        instanceIdentifierSet.addAll(original.getPatternInstances());
        instanceIdentifierSet.addAll(original.getSeedInstances());
        Annotation.InMemoryAnnotationStorage inMemoryAnnotationStorage = new Annotation.InMemoryAnnotationStorage();
        for (InstanceIdentifier instanceIdentifier : instanceIdentifierSet) {
            inMemoryAnnotationStorage.addAnnotation(instanceIdentifier, new LabelPattern("NO_RELATION", Annotation.FrozenState.NO_FROZEN));
        }
        return inMemoryAnnotationStorage.convertToMappings();
    }
}
