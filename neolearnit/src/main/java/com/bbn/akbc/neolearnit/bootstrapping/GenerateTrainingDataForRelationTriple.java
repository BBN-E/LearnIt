package com.bbn.akbc.neolearnit.bootstrapping;

import com.bbn.akbc.neolearnit.common.LearnItConfig;
import com.bbn.akbc.neolearnit.common.targets.TargetFactory;
import com.bbn.akbc.neolearnit.labelers.PatternStrLabeler;
import com.bbn.akbc.neolearnit.mappings.filters.TargetFilter;
import com.bbn.akbc.neolearnit.mappings.groups.Mappings;
import com.bbn.akbc.neolearnit.serializers.binary_event.RelationalTripleObserver;

import java.io.File;

public class GenerateTrainingDataForRelationTriple {
    final static boolean USE_ALL_PATTERN_FROM_AUTOPOPULATED_MAPPINGS = false;

    public static void main(String[] args) throws Exception {

        String strFileParam = args[0];
        LearnItConfig.loadParams(new File(strFileParam));
        String strAutoPopulatedMappings = args[1];
        String strOutputTxt = args[2];

        boolean useExternalLabeledMappings = false;
        String strLabeledMappings = null;
        if (args.length > 3) {
            useExternalLabeledMappings = true;
            strLabeledMappings = args[3];
        }

        Mappings autoGeneratedMappings = Mappings.deserialize(new File(strAutoPopulatedMappings), true);
        TargetFilter targetFilter = new TargetFilter(TargetFactory.makeBinaryEventEventTarget());
        autoGeneratedMappings = targetFilter.makeFiltered(autoGeneratedMappings);

        Mappings labeledMappings = null;
        if (useExternalLabeledMappings) {
            labeledMappings = Mappings.deserialize(new File(strLabeledMappings), true);
            labeledMappings = targetFilter.makeFiltered(labeledMappings);
        } else {
            PatternStrLabeler patternStrLabeler = new PatternStrLabeler(USE_ALL_PATTERN_FROM_AUTOPOPULATED_MAPPINGS);
            labeledMappings = patternStrLabeler.LabelMappings(autoGeneratedMappings);
        }

        RelationalTripleObserver relationalTripleObserver = new RelationalTripleObserver(strOutputTxt);
        relationalTripleObserver.observe(labeledMappings);
        relationalTripleObserver.build();
    }
}
