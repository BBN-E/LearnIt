package com.bbn.akbc.neolearnit.labelers;

import com.bbn.akbc.neolearnit.common.Annotation;
import com.bbn.akbc.neolearnit.common.InstanceIdentifier;
import com.bbn.akbc.neolearnit.common.LearnItConfig;
import com.bbn.akbc.neolearnit.common.targets.Target;
import com.bbn.akbc.neolearnit.common.targets.TargetFactory;
import com.bbn.akbc.neolearnit.mappings.groups.Mappings;
import com.bbn.akbc.neolearnit.observations.label.LabelPattern;

import java.io.File;

public class EventMentionLabelItSelfLabeler implements MappingLabeler {
    public static void main(String[] args) throws Exception{
        String paramPath = args[0];
        LearnItConfig.loadParams(new File(paramPath));
        String autogeneratedMappingsPath = args[1];
        String outputLabeledMappingsPath = args[2];
        EventMentionLabelItSelfLabeler eventMentionLabelItSelfLabeler = new EventMentionLabelItSelfLabeler();
        Mappings mappings = Mappings.deserialize(new File(autogeneratedMappingsPath), true);
        Mappings labeledMappings = eventMentionLabelItSelfLabeler.LabelMappings(mappings);
        labeledMappings.serialize(new File(outputLabeledMappingsPath), true);
    }

    @Override
    public Mappings LabelMappings(Mappings original) {
        Target target = TargetFactory.makeUnaryEventTarget();

        Annotation.InMemoryAnnotationStorage inMemoryAnnotationStorage = new Annotation.InMemoryAnnotationStorage();

        for (InstanceIdentifier instanceIdentifier : original.getSeedInstances()) {
            if(instanceIdentifier.getSlot0SpanningType() == InstanceIdentifier.SpanningType.EventMention && instanceIdentifier.getSlot1SpanningType() == InstanceIdentifier.SpanningType.Empty){
                String eventType = instanceIdentifier.getSlotEntityType(0);
                if(eventType.contains("STEP3:")){
                    // TODO: Remove this.
                    eventType = eventType.replace("STEP3:","");
                    inMemoryAnnotationStorage.addAnnotation(instanceIdentifier, new LabelPattern(eventType, Annotation.FrozenState.FROZEN_GOOD));
                }
            }
        }
        return inMemoryAnnotationStorage.convertToMappings();
    }
}
