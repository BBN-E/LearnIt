package com.bbn.akbc.neolearnit.labelers;

import com.bbn.akbc.neolearnit.common.Annotation;
import com.bbn.akbc.neolearnit.common.InstanceIdentifier;
import com.bbn.akbc.neolearnit.common.LearnItConfig;
import com.bbn.akbc.neolearnit.mappings.groups.Mappings;
import com.bbn.akbc.neolearnit.observations.label.LabelPattern;
import com.bbn.akbc.neolearnit.observations.pattern.LearnitPattern;
import com.bbn.akbc.neolearnit.util.GeneralUtils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.Buffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TabularPatternListLabeler implements MappingsLabeler {


    public static void main(String[] args) throws Exception {
        LearnItConfig.loadParams(new File(args[0]));

        String autogeneratedMappingsListPath = args[1];
        String outputLabeledMappingsPath = args[2];
        String inputTabularFilePath = args[3];
        int minimumPatternFreqFilter = Integer.parseInt(args[4]);
        int maximumPatternFireTimeFilter = Integer.parseInt(args[5]);
        List<String> mappingsPathList = GeneralUtils.readLinesIntoList(autogeneratedMappingsListPath);

        Annotation.InMemoryAnnotationStorage labeledMappings = new Annotation.InMemoryAnnotationStorage();
        TabularPatternListLabeler tabularPatternListLabeler = new TabularPatternListLabeler(inputTabularFilePath,minimumPatternFreqFilter,maximumPatternFireTimeFilter);

        for (String autogeneratedMappingsPath : mappingsPathList) {
            Mappings inputMappings = Mappings.deserialize(new File(autogeneratedMappingsPath), true);
            tabularPatternListLabeler.LabelMappings(inputMappings,labeledMappings);
        }
        labeledMappings.convertToMappings().serialize(new File(outputLabeledMappingsPath), true);
    }

    static class TabularPatternEntry {
        String patternPrettyStr;
        String eventType;
        int freq;

        public TabularPatternEntry(String patternPrettyStr, String eventType, int freq) {
            this.patternPrettyStr = patternPrettyStr;
            this.eventType = eventType;
            this.freq = freq;
        }
    }

    Map<String,List<TabularPatternEntry>> patternPrettyStrToTabularPatternEntries;


    public TabularPatternListLabeler(String tabularFilePath, int minimumPatternFreqFilter, int maximumPatternFireTimeFilter) throws IOException {
        this.patternPrettyStrToTabularPatternEntries = new HashMap<>();
        List<String> lines = GeneralUtils.readLinesIntoList(tabularFilePath);
        for (String line : lines) {
            line = line.trim();
            String[] split = line.split("\t");
            assert (split.length == 3);
            int patternTriggeredFreq = Integer.parseInt(split[0]);
            String patternPrettyStr = split[1];
            String eventType = split[2];
            if(patternTriggeredFreq > minimumPatternFreqFilter){
                List<TabularPatternEntry> buf = this.patternPrettyStrToTabularPatternEntries.getOrDefault(patternPrettyStr,new ArrayList<>());
                buf.add(new TabularPatternEntry(patternPrettyStr, eventType, Math.min(maximumPatternFireTimeFilter,patternTriggeredFreq)));
                this.patternPrettyStrToTabularPatternEntries.put(patternPrettyStr,buf);
            }
        }
    }

    @Override
    public Annotation.InMemoryAnnotationStorage LabelMappings(Mappings original, Annotation.InMemoryAnnotationStorage labeledMappings) throws Exception {
        for(LearnitPattern learnitPattern:original.getAllPatterns().elementSet()){
            String patternPrettyStr = learnitPattern.toPrettyString();
            if(this.patternPrettyStrToTabularPatternEntries.containsKey(patternPrettyStr)){
                for(TabularPatternEntry entry: this.patternPrettyStrToTabularPatternEntries.get(patternPrettyStr)){
                    while(entry.freq>0){
                        for(InstanceIdentifier instanceIdentifier:original.getInstancesForPattern(learnitPattern)){
                            labeledMappings.addAnnotation(instanceIdentifier,new LabelPattern(entry.eventType, Annotation.FrozenState.FROZEN_GOOD));
                            entry.freq--;
                        }
                    }
                }
            }
        }
        return labeledMappings;
    }
}
